<script type="text/javascript">
    // Chart

    function renderChartAccumulatePipeline() {
        if ($("#chartAccumulatePipeline").length === 0) return
        $("#chartAccumulatePipeline svg").remove();


        /**
         * Config
         *
         */
        var colors = {
            PLAN_PERCENTAGE: "#f0b386",
            ACTUAL_PERCENTAGE: "#9ac5e7"
        }
        var labels = {
            PLAN_PERCENTAGE: "Plan",
            ACTUAL_PERCENTAGE: "Actual"
        }

        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']


        /**
         * Initial
         *
         */
        var tooltip = d3.select('#tooltip');
        var svg = d3.select("#chartAccumulatePipeline").append("svg")
            .attr("id", "svgAccumulatePipeline")
            .attr("width", $('#chartWrapperAccumulatePipeline').width())
            .attr("height", $('#chartWrapperAccumulatePipeline').width() / 1.92)
            .call(responsivefyChart);

        var margin = { top: 100, right: 80, bottom: 60, left: 60 },
            width = +svg.attr("width") - margin.left - margin.right,
            height = +svg.attr("height") - margin.top - margin.bottom,
            g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var x0 = d3.scaleBand()
            .rangeRound([0, width])
            .paddingInner(0.1);

        var x1 = d3.scaleBand()
            .padding(0.05);

        var y = d3.scaleLinear()
            .rangeRound([height, 0]);

        var y1 = d3.scaleBand()

        var z = d3.scaleOrdinal()
            .range(_.values(colors));

        var stack = d3.stack()
            .offset(d3.stackOffsetExpand);

        var data = model.Accumulated.Pipeline || [];

        //console.log("data", data);

        x0.domain(data.map(function (d) { return d.PM_ID; }));
        x1.domain(_.sortBy(data, 'MONTH').map(function (d) { return d.MONTH; }))
            .rangeRound([0, x0.bandwidth()])
            .padding(0.2);

        z.domain(['PLAN_PERCENTAGE', 'ACTUAL_PERCENTAGE'])
        var keys = z.domain()

        var groupData = d3.nest()
            .key(function (d) { return d.MONTH + d.PM_ID; })
            .rollup(function (d, i) {
                var PLAN_PERCENTAGE = d[0].PLAN
                var ACTUAL_PERCENTAGE = d[0].ACTUAL

                if (PLAN_PERCENTAGE > 0) {
                    ACTUAL_PERCENTAGE = (ACTUAL_PERCENTAGE * 100) / PLAN_PERCENTAGE
                    PLAN_PERCENTAGE = 100 - ACTUAL_PERCENTAGE
                }
                else {
                    PLAN_PERCENTAGE = 0
                    ACTUAL_PERCENTAGE = 0
                }

                var d2 = {
                    MONTH: d[0].MONTH,
                    PM_ID: d[0].PM_ID,
                    PLAN: d[0].PLAN,
                    ACTUAL: d[0].ACTUAL,
                    PLAN_PERCENTAGE: PLAN_PERCENTAGE,
                    ACTUAL_PERCENTAGE: ACTUAL_PERCENTAGE
                }

                //console.log("rollup d", d, d2);
                return d2;
            })
            .entries(data)
            .map(function (d) { return d.value; });

        //console.log("groupData", groupData)

        var stackData = stack
            .keys(keys)(groupData)

        //console.log("stackData", stackData)

        //y.domain([0, 100]).nice();

        //console.log("keys", keys)

        var serie = g.selectAll(".serie")
            .data(stackData)
            .enter().append("g")
            .attr("class", "serie")
            .attr("fill", function (d) { return z(d.key); });

        serie.selectAll("rect")
            .data(function (d) { return d; })
            .enter()
            .append("rect")
            .attr("class", "serie-rect")
            .attr("transform", function (d) {
                return "translate(" + x0(d.data.PM_ID) + ",0)";
            })
            .attr("x", function (d) {
                return x1(d.data.MONTH);
            })
            .attr("y", function (d) {
                return y(d[1]);
            })
            .attr("height", function (d) {
                return y(d[0]) - y(d[1]);
            })
            .attr("width", x1.bandwidth())
            .on('mousemove', function (d, i) {
                var i = 0;
                var html = '<br><span style="color: ' + colors.ACTUAL_PERCENTAGE + ';">' + labels.ACTUAL_PERCENTAGE + ': ' + d.data.ACTUAL + '</span>';
                html = html + '<br><span style="color: ' + colors.PLAN_PERCENTAGE + ';">' + labels.PLAN_PERCENTAGE + ': ' + d.data.PLAN + '</span>';
                tooltip.style('display', 'block')
                    .style('left', d3.event.pageX + 20 + 'px')
                    .style('top', d3.event.pageY - 20 + 'px')
                    .style('visibility', 'visible')
                    .html(d.data.PM_ID + ': ' + months[d.data.MONTH] + html);
                tooltip.transition().duration(200).style("opacity", 1);
            }).on('mouseout', function () {
                if (tooltip) {
                    tooltip
                        .transition()
                        .duration(200)
                        .style("opacity", 0);
                    tooltip
                        .style('visibility', 'hidden');
                }
            })
            .on("click", function (d, i) { console.log("serie-rect click d", i, d); });


        /**
         * Axis Bottom
         *
         */

        // PM ID
        g.append("g")
            .attr("class", "xaxis axis")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x0));

        g.selectAll(".xaxis text")  // select all the text elements for the xaxis
            .attr("y", 35);

        // Month
        x0.domain().forEach(function (id) {
            g.append("g")
                .attr("class", "monthaxis axis")
                .attr("transform", "translate(" + x0(id) + "," + height + ")")
                .call(d3.axisBottom(x1).tickFormat(function (d) { return months[d]; }));
        })

        g.selectAll(".monthaxis text")  // select all the text elements for the xaxis
            .attr("font-size", 10)
            .attr("x", -8)
            .attr("y", -5)
            .attr("text-anchor", "end")
            .attr("transform", "rotate(-90)");


        /**
         * Axis Left
         *
         */
        g.append("g")
            .attr("class", "axis ")
            .call(d3.axisLeft(y).ticks(null, "s").tickFormat(function (d) { return d * 100; }))
            .append("text")
            .attr("x", 0)
            .attr("y", -40)
            .attr("fill", "#000")
            .attr("font-weight", "bold")
            .attr("text-anchor", "end")
            .attr("transform", "rotate(-90)")
            .text("จำนวน % (การทำ PM)");


        /**
         * Title
         *
         */
        svg.append("text")
            .attr("x", 15)
            .attr("y", 25)
            .attr("dy", ".35em")
            .attr("font-weight", "bold")
            .attr("font-size", 22)
            .style("text-anchor", "begin")
            .text("Pipeline PM IA Monitoring Accumulated");

        //var legend = serie.append("g")
        //    .attr("class", "legend")
        //    .attr("transform", function (d) {
        //        if (!d) return null

        //        var d = d[d.length - 1];
        //        return "translate(" + (x0(d.data.PM_ID) + x1(d.data.MONTH) + x1.bandwidth()) + "," + ((y(d[0]) + y(d[1])) / 2) + ")";
        //    });

        //legend.append("line")
        //    .attr("x1", -6)
        //    .attr("x2", 6)
        //    .attr("stroke", "#000");


        /**
         * Legend
         *
         */
        var startXAt = 15,
            startYAt = 35,
            tabSpace = 170,
            legend_tabs = [],
            colMax = 3,
            colIndex = 0,
            rowSpace = 10,
            i;
        for (i = 0; i <= (keys.length + 1); i++) {
            legend_tabs.push({
                x: tabSpace * colIndex,
                y: rowSpace
            })

            colIndex++

            if ((i + 1) % colMax === 0) {
                colIndex = 0
                rowSpace = rowSpace + 20
            }
        }
        var startp = svg.append("g")
            .attr("class", "legendbox")
            .attr("transform", function () {
                return "translate(" + startXAt + ", " + startYAt + ")"
            })
            .attr("id", "legendbox");

        var legend = startp.selectAll(".legend")
            .data(z.domain().slice())
            .enter().append("g")
            .attr("class", "legend")
            .attr("transform", function (d, i) {
                return "translate(" + legend_tabs[i].x + "," + legend_tabs[i].y + ")";
            });

        legend.append("rect")
            .attr("x", 0)
            .attr("y", 2)
            .attr("width", 10)
            .attr("height", 10)
            .style("fill", z);

        legend.append("text")
            .attr("x", 16)
            .attr("y", 7)
            .attr("dy", ".35em")
            .style("text-anchor", "begin")
            .text(function (d) {
                return labels[d];
            });
    }

    $(document).ready(function () {
        $('#panelPipeline').on('shown.bs.collapse', function () {
            renderChartAccumulatePipeline()
        })
    });
</script>
