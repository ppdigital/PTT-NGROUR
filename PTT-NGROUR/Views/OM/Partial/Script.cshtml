<script src="~/Scripts/Chart/Chart.js"></script>
<script src="~/Scripts/Chart/Chart.PieceLabel.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
<script src="~/Scripts/bootstrap-select-1.12.4/dist/js/bootstrap-select.min.js"></script>
<script src="~/Content/bootstrap-datepicker.js"></script>

<script>
    var Check = function () {
        var radioMonth = document.getElementById('radioMonth')
        var radioYear = document.getElementById('radioYear')
        if (radioMonth && radioMonth.checked) {
            document.getElementById('Month-filter').style.display = 'inline-block';
            document.getElementById('Year-filter').style.display = 'none';
        }
        else if (radioYear && radioYear.checked) {
            document.getElementById('Month-filter').style.display = 'none';
            document.getElementById('Year-filter').style.display = 'inline-block';
        }
    }

    function contains(str, arr) {
        return arr.indexOf(str) === -1 ? false : true;
    }

    function getCSSStyles(parentElement) {
        var selectorTextArr = [];

        // Add Parent element Id and Classes to the list
        selectorTextArr.push('#' + parentElement.id);
        $('#CompletionPipeline .panel-body').append('getCSSStyles6;')
        $('#CompletionPipeline .panel-body').append(parentElement.classList.length)
        for (var c = 0; c < parentElement.classList.length; c++) {
            $('#CompletionPipeline .panel-body').append('getCSSStyles5;')
            if (!contains('.' + parentElement.classList[c], selectorTextArr)) {
                selectorTextArr.push('.' + parentElement.classList[c]);
                $('#CompletionPipeline .panel-body').append('getCSSStyles4;')
            }
            $('#CompletionPipeline .panel-body').append('getCSSStyles3;')
        }

        $('#CompletionPipeline .panel-body').append('getCSSStyles2;')
        // Add Children element Ids and Classes to the list
        var nodes = parentElement.getElementsByTagName("*");
        for (var i = 0; i < nodes.length; i++) {
            var id = nodes[i].id;
            if (!contains('#' + id, selectorTextArr))
                selectorTextArr.push('#' + id);

            var classes = nodes[i].classList;
            for (var c = 0; c < classes.length; c++)
                if (!contains('.' + classes[c], selectorTextArr))
                    selectorTextArr.push('.' + classes[c]);
        }

        $('#CompletionPipeline .panel-body').append('getCSSStyles1;')
        // Extract CSS Rules
        var extractedCSSText = "";
        for (var i = 0; i < document.styleSheets.length; i++) {
            var s = document.styleSheets[i];

            try {
                if (!s.cssRules) continue;
            } catch (e) {
                if (e.name !== 'SecurityError') throw e; // for Firefox
                continue;
            }

            var cssRules = s.cssRules;
            for (var r = 0; r < cssRules.length; r++) {
                if (contains(cssRules[r].selectorText, selectorTextArr))
                    extractedCSSText += cssRules[r].cssText;
            }
        }

        return extractedCSSText;
    }

    function appendCSS(cssText, element) {
        var styleElement = document.createElement("style");
        styleElement.setAttribute("type", "text/css");
        styleElement.innerHTML = cssText;
        var refNode = element.hasChildNodes() ? element.children[0] : null;
        element.insertBefore(styleElement, refNode);
    }

    // Below are the functions that handle actual exporting:
    // getSVGString ( svgNode ) and svgString2Image( svgString, width, height, format, callback )
    function getSVGString(svgNode) {
        svgNode.setAttribute('xlink', 'http://www.w3.org/1999/xlink');
        $('#CompletionPipeline .panel-body').append('svg5;')
        var cssStyleText = getCSSStyles(svgNode);
        $('#CompletionPipeline .panel-body').append('svg4;')
        appendCSS(cssStyleText, svgNode);
        $('#CompletionPipeline .panel-body').append('svg3;')

        var serializer = new XMLSerializer();
        var svgString = serializer.serializeToString(svgNode);
        $('#CompletionPipeline .panel-body').append('svg2;')
        svgString = svgString.replace(/(\w+)?:?xlink=/g, 'xmlns:xlink='); // Fix root xlink without namespace
        svgString = svgString.replace(/NS\d+:href/g, 'xlink:href'); // Safari NS namespace fix
        $('#CompletionPipeline .panel-body').append('svg1;')
        return svgString;
    }


    function svgString2Image(svgString, width, height, format, callback) {
        var format = format ? format : 'png';

        var imgsrc = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString))); // Convert SVG string to data URL

        var canvas = document.createElement("canvas");
        var context = canvas.getContext("2d");

        canvas.width = width;
        canvas.height = height;

        var image = new Image();
        image.onload = function () {
            context.clearRect(0, 0, width, height);
            context.drawImage(image, 0, 0, width, height);

            canvas.toBlob(function (blob) {
                var filesize = Math.round(blob.length / 1024) + ' KB';
                if (callback) callback(blob, filesize);
            });
        };
        image.src = imgsrc;
    }

    $(document).ready(function () {

        $('#MultiRegion').selectpicker('selectAll');

        $('#Month-filter').datepicker({
            format: "m/yyyy",
            viewMode: "months",
            minViewMode: "months",
            autoclose: true
        }).datepicker("setDate", d)

        $('[name="pStrMonth"]').val(initMonth)

        $('#Month-filter').datepicker()
            .on('clearDate', function (e) {
                $('[name="pStrMonth"]').val($(e).val())
            });

        $('#Month-filter').change(function () {
            var x = $("#Month-filter").val().split("/");
            $('[name="pStrMonth"]').val(x[0])
            $('[name="pStrYear"]').val(x[1])
        })

        $("#Year-filter").datepicker({
            format: "yyyy",
            viewMode: "years",
            minViewMode: "years",
            autoclose: true
        }).datepicker("setDate", d);

        $('[name="pStrYear"]').val(initYear)

        $('#Month-filter').datepicker()
            .on('clearDate', function (e) {
                $('[name="pStrYear"]').val($("#Year-filter").val())
            });

        Check();
    });
</script>