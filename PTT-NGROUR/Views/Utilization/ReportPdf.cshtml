@model List<PTT_NGROUR.Models.DataModel.ModelGetU>

@{
    Layout = null;
    ViewBag.Title = "ReportPdf";
}

<html>
    <head>
        <link rel="stylesheet" href="~/Content/bootstrap.min.css" />
        <link rel="stylesheet" href="~/Content/bootstrap-theme.min.css" />
        <style>
            table{
            background-color:white;
        }
        tr {
            page-break-inside: avoid;
            page-break-after:avoid;
        }
        </style>
        <script src="~/Scripts/jquery-3.3.1.min.js"></script>
        <script src="~/Scripts/Chart/Chart.js"></script>
        <script src="~/Scripts/Chart/Chart.PieceLabel.min.js"></script>
    </head>
    
    <body>
        <div class="row">
            <div class="col-xs-6">
                <div style="font-family: Corbel; font-size: small ;text-align:center " class="row">
                    <center>
                        <div class="pt5">Gate Station</div>
                        <div class="pieGraph-lg pieGraph-md pieGraph-sm pieGraph-xs" style="margin-top:-2rem;">
                            <canvas id="pieGateAll" style="padding: 0;margin: auto;display: block; "> </canvas>

                        </div>
                    </center>
                </div>
            </div>
            <!--PieLine Donut Graph -->
            <div class="col-xs-6">
                <div style="font-family: Corbel; font-size: small ;text-align:center " class="row">
                    <center>
                        <div class="pt5 ">Pipeline</div>
                        <div class="pieGraph-lg pieGraph-md pieGraph-sm pieGraph-xs" style="margin-top:-2rem;">
                            <canvas id="piePipelineAll" style="padding: 0;margin: auto;display: block; "> </canvas>
                        </div>
                    </center>

                </div>

            </div>
                      
        </div>

        <script>

            function showPIE(pStrMode, pListData) {


                let dataT = {
                    labels: ["Alert", "Warning", "Pass"],
                    datasets: [{
                        label: "Test Data",
                        data: pListData,
                        fill: false,
                        backgroundColor: ["#e74c3c", "#f1c40f", "#16a085", "#e67e22"],
                        hoverBackgroundColor: ["#e74c3c", "#f1c40f", "#16a085", "#e67e22"],
                        borderColor: ["#e74c3c", "#f1c40f", "#16a085", "#e67e22"],
                        borderWidth: 1
                    }]
                };

                let strIdPie = "";
                let objGraph = null;
                if (pStrMode === "PIPELINE") {
                    strIdPie = "#piePipelineAll";
                    //objGraph = _graphPipeLine;
                } else if (pStrMode === "GATE") {
                    strIdPie = "#pieGateAll";
                    //objGraph = _graphGate
                }
                //if (objGraph != null) {
                //    objGraph.destroy();
                //}
                let ctx = $(strIdPie).get(0).getContext("2d");
                objGraph = new Chart(ctx, {
                    type: 'doughnut',
                    data: dataT,
                    options: {
                        responsive: true,
                        animation: false,
                        pieceLabel: { mode: 'value', fontColor: 'white' },
                        title: { display: true },
                        legend: { position: 'bottom' },
                        scales: {
                            xAxes: [{ gridLines: { display: false }, display: false, scaleLabel: { display: false, labelString: '' } }],
                            yAxes: [{ gridLines: { display: false }, display: false, scaleLabel: { display: false, labelString: '' }, ticks: { stepSize: 50, beginAtZero: true } }]
                        },
                    }
                });
                objGraph.update();
            }

            var dataPipeLine = [
                @Model.Where(x=>x.TYPE == "PIPELINE" && x.COLOR == "Red").Count(),
                @Model.Where(x=>x.TYPE == "PIPELINE" && x.COLOR == "Yellow").Count(),
                @Model.Where(x=>x.TYPE == "PIPELINE" && x.COLOR == "Green").Count()
            ];

            var dataGATE = [
                @Model.Where(x=>x.TYPE == "GATE" && x.COLOR == "Red").Count(),
                @Model.Where(x=>x.TYPE == "GATE" && x.COLOR == "Yellow").Count(),
                @Model.Where(x=>x.TYPE == "GATE" && x.COLOR == "Green").Count()
            ];

            $(function () {
                showPIE("PIPELINE", dataPipeLine);
                showPIE("GATE", dataGATE);
            });
        </script>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Name</th>
                    <th>Velocity</th>
                    <th>Color Status</th>
                    <th>Month/Year</th>
                    <th>Map</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var m in Model)
                {
                    <text>
                        <tr>
                            <td>@m.NO</td>
                            <td>@m.NAME</td>
                            <td>@m.VALUE</td>
                            <td>@m.COLOR</td>
                            <td>@m.MONTH / @m.YEAR</td>
                            <td>@m.COLOR</td>
                        </tr>
                    </text>
                }
            </tbody>
        </table>
        
       
    </body>
</html>


