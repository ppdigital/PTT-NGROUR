@model PTT_NGROUR.Models.ViewModel.ModelOmIndex

    <script src="~/Scripts/Chart/Chart.js"></script>
    <script src="~/Scripts/Chart/Chart.PieceLabel.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script src="~/Scripts/bootstrap-select-1.12.4/dist/js/bootstrap-select.min.js"></script>
    <script src="~/Content/bootstrap-datepicker.js"></script>
    <script>
        jQuery.ajaxSettings.traditional = true;

        var _divGraph = $("#divGraph");
        var _tblMeter = $("#tblMeter");

        var horizonalLinePlugin = {
            afterDraw: function (chartInstance) {
                var yScale = chartInstance.scales["y-axis-0"];
                var canvas = chartInstance.chart;
                var ctx = canvas.ctx;
                var index;
                var line;
                var style;

                if (chartInstance.options.horizontalLine) {
                    for (index = 0; index < chartInstance.options.horizontalLine.length; index++) {
                        line = chartInstance.options.horizontalLine[index];

                        if (!line.style) {
                            style = "rgba(169,169,169, .6)";
                        } else {
                            style = line.style;
                        }

                        if (line.y) {
                            yValue = yScale.getPixelForValue(line.y);
                        } else {
                            yValue = 0;
                        }

                        ctx.lineWidth = 3;

                        if (yValue) {
                            ctx.beginPath();
                            ctx.moveTo(0, yValue);
                            ctx.lineTo(canvas.width, yValue);
                            ctx.strokeStyle = style;
                            ctx.stroke();
                        }

                        if (line.text) {
                            ctx.fillStyle = style;
                            ctx.fillText(line.text, 0, yValue + ctx.lineWidth);
                        }
                    }
                    return;
                };
            }
        };
        Chart.pluginService.register(horizonalLinePlugin);

        var barChartData = {
            labels: [@Model.BarGraph.ListLabel.Select(x=> new HtmlString( "'" + x + "'")).Aggregate((x,y)=> new HtmlString(x + "," +y))],
            datasets: [
                @foreach (var item in Model.BarGraph.ListML)
            {
                <text>
                    {
                        label: "@item.Label",
                        backgroundColor: "@item.HexColor",
                        borderColor: "#00",
                        borderWidth: 1,
                        data: [ @item.ListData.Select(x => x.ToString()).Aggregate((x, y) => x + " , " + y)]
                    },
                </text>
            }
            ]
        };

        var ctx = document.getElementById('canvas').getContext('2d');
        var hl = [{
            y: 100,
            style: "rgba(255, 0, 0, 1)",
            text: "max"
        }];

        window.myBar = new Chart(ctx, {
            type: 'bar',
            data: barChartData,
            options: {
                responsive: true,
                legend: {
                    position: 'bottom',
                },
                title: {
                    display: true,
                    text: ' '
                },
                plugins: {
                    datalabels: {
                        formatter: function (value) {
                            return value;
                        },
                        anchor: "end",
                        align: 'end',
                        font: {
                            weight: 'bold'
                        },
                    }
                },
                scales: {
                    xAxes: [{
                        gridLines: {
                            display: true
                        },
                        barThickness: 40,
                        stacked: false

                    }],
                    yAxes: [{
                        gridLines: {
                            display: true
                        },
                        stacked: false

                    }]

                },
                horizontalLine: hl

            }


        });

        $('#Month-filter').datepicker({
            format: "m/yyyy",
            viewMode: "months",
            minViewMode: "months",
            autoclose: true
        }).on('dp.change', function (e) {

            console.log(e);
        });

        $("#Year-filter").datepicker({
            format: "yyyy",
            viewMode: "years",
            minViewMode: "years",
            autoclose: true
        }).on('dp.change', function (e) {

            console.log(e);
        });

        $("#btnSearch").click(function (e) {
            searchData();
        });

        function Check() {

            if (document.getElementById('radioMonth').checked) {
                document.getElementById('Month-filter').style.display = 'inline-block';
                document.getElementById('Year-filter').style.display = 'none';
            }
            else if (document.getElementById('radioYear').checked) {
                document.getElementById('Month-filter').style.display = 'none';
                document.getElementById('Year-filter').style.display = 'inline-block';
            }
        }

        function removeBarData(chart) {
            var ds2 = {
                labels: [],
                datasets: []
            };
            chart.data = ds2;
            chart.update();
        }

        function searchData() {

            var chart = window.myBar;
            removeBarData(chart);
            var strUrl = "@Url.Action("SearchData")";
            var param = { pStrYear: "", pStrMonth: "", pArrRegion: $("#MultiRegion").val() };
            console.log(param);
            if (document.getElementById('radioMonth').checked) {
                var x = $("#Month-filter").val().split("/");
                param.pStrMonth = x[0];
                param.pStrYear = x[1];

            } else {
                param.pStrYear = $("#Year-filter").val();
            }
            _divGraph.html("");
            _tblMeter.html("");
            $.post(strUrl, param, function (data) {

                if (!data || !data.Result) {
                    alert("Not Found Data");
                    return;
                }
                if (data.StatusText !== "OK") {
                    var strError = "Error : " + data.ErrorMessage + "\r\n" + data.ErrorStackTrace;
                    alert(strError);
                    return;
                }
                window.myBar.options.horizontalLine = null;
                var rs = data.Result.BarGraph;
                var barChartData = {
                    labels: rs.ListLabel,
                    datasets: []
                };
                
                for (var i in rs.ListML) {
                    var ml = rs.ListML[i];
                    //debugger;
                    if (window.myBar.options.horizontalLine == null) {
                        if ( !ml.ListData.every(function (x) { return x < 101 })) {
                            window.myBar.options.horizontalLine = hl;
                        //    window.myBar.options.horizontalLine = [];
                        //} else {
                        }
                    }
                    var dsItem = {
                        label: ml.Label,
                        backgroundColor: ml.HexColor,
                        borderColor: "#000000",
                        borderWidth: 1,
                        data: ml.ListData
                    }
                    barChartData.datasets.push(dsItem);
                }

                chart.data = barChartData;
                chart.update();
                renderAccGraph(data.Result.ListAccGraph);
                renderTable(
                    data.Result.ListMeterMaintenanceLevelForTable,
                    data.Result.ListRegionForTableHeader);
            });
        }

        var _arrCurrentActual = [];
        function renderAccGraph(pData) {            
            if (!pData || pData.length == 0) {
                return;
            }
            _arrCurrentActual = [];

            for (var i in pData) {
                var d = pData[i];
                
                _arrCurrentActual = d.Actual;
                var dsActual = {
                    label: "Actual",
                    backgroundColor: "#DBFF33",
                    data: d.Actual
                };
                var dsPlan = {
                    label: "Plan",
                    backgroundColor: "#FFBD33",
                    data: d.Plan
                };
                var dsAccActual = {
                    type: "line",
                    fill: false,
                    label: "AcumulatePlan",
                    backgroundColor: "#75FF33",
                    borderColor: "#75FF33",
                    datalabels: {
                        align: 'end',
                        anchor: 'end'
                    },
                    data: d.AccActual
                };
                var dsAccPlan = {
                    type: "line",
                    fill: false,
                    label: "AcumulateActual",
                    backgroundColor: "#FF5733",
                    borderColor: "#FF5733",
                    data: d.AccPlan,
                    datalabels: {
                        align: 'end',
                        anchor: 'end'
                    }
                };
                var barChartData = {
                    labels: d.MonthName,
                    datasets: [dsAccActual, dsAccPlan, dsActual, dsPlan]
                };

                var cv = $("<canvas class='mb-2rem'/>");
                cv.appendTo(_divGraph);
                var ctx = cv[0].getContext('2d');
                var chart = new Chart(ctx, {
                    type: 'bar',
                    data: barChartData,
                    options: {
                        responsive: true,
                        legend: {
                            position: 'top',
                            onClick: function (e, l) {
                                var index = l.datasetIndex;
                                var ci = this.chart;
                                var meta = ci.getDatasetMeta(index);
                                meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
                                ci.update();
                            }
                        },
                        tooltips: {
                            mode: 'index',
                            intersect: false
                        },
                        scales: {
                            xAxes: [{
                                stacked: false,
                            }],
                            yAxes: [{
                                stacked: false
                            }]
                        },
                        plugins: {
                            datalabels: {
                                color: function (context) {
                                    var index = context.datasetIndex;
                                    var result = "black";
                                    if (index === 0) {
                                        result = "#75FF33";
                                    } else if (index === 1) {
                                        result = "#FF5733";
                                    }
                                    return result;
                                },
                                font: {
                                    weight: 'bold'
                                },
                                formatter: function (value, context) {
                                    return value;
                                    //var index = context.datasetIndex;
                                    //if (index == 3) {
                                    //    var index2 = context.dataIndex;
                                    //    var vl = _arrCurrentActual[index2];
                                    //    console.log(_arrCurrentActual);
                                    //    console.log(vl);
                                    //    return vl; //(value - vl);
                                    //} else {
                                    //    return value;
                                    //}
                                },
                                display: function (context) {
                                    var index = context.datasetIndex;
                                    var ci = context.chart;
                                    var meta = ci.getDatasetMeta(index);
                                    return meta.hidden === null;
                                },
                                title: true
                            }
                        },
                        title: {
                            display: true,
                            text: d.ML
                        }
                    }
                });
            }
        }

        function renderTable(pData , pHeader) {
            console.log(pData);
            console.log(pHeader);
            var strAll = "";
            var strTh = "<th rowspan=2>Maintenamce Level (ML)</th><th rowspan=2>PM Intervals</th>";
            var strTh2 = "";
            var strBody = "";
            for (var i in pHeader) {
                strTh += "<th colspan=2>Region " + pHeader[i] + "</th>";
                strTh2 += "<th>Plan</th><th>Actual</th>"
            }
            for (var i in pData) {
                var meter = pData[i];                
                for (var j in meter.ListPmIntervals) {
                    strBody += "<tr>";
                    if (j == 0) {
                        strBody += "<th rowspan=" + (meter.ListPmIntervals.length) + " style='padding-top:auto;padding-bottom:auto'>" + meter.Name + "</th>"
                    }
                    var pmi = meter.ListPmIntervals[j];
                    strBody += "<th>" + pmi.Name + "</th>";
                    for (var k in pmi.ListActual) {
                        var strActual = pmi.ListActual[k];
                        var strPlan = pmi.ListPlan[k];
                        if (strPlan === "" && strActual === "") {
                            strBody += "<td class='active'></td><td  class='active'></td>";
                        } else if (strPlan !== "0" && strActual === "0") {
                            strBody += "<td >" + strPlan + "</td><td class='cellDanger'>" + strActual + "</td>";
                        } else {
                            strBody += "<td >" + strPlan + "</td><td>" + strActual + "</td>";
                        }
                    }

                    strBody += "</tr>";
                }
            }
            strAll = "<thead><tr>" + strTh + "</tr><tr>" + strTh2 + "</tr></thead>";
            strAll += "<tbody>" + strBody + "</tbody>"
            _tblMeter.html(strAll);
            console.log(strBody);
        }
        searchData();
    </script>