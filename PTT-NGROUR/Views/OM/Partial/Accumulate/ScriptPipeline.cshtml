<script type="text/javascript">
    // Chart

    function renderChartAccumulatePipeline() {
        if ($("#chartAccumulatePipeline").length === 0) return
        $("#chartAccumulatePipeline svg").remove();


        /**
         * Config
         *
         */
        var _colors = {
            alert: "#ea8a8a"
        }
        var colors = []
        var keys = []

        var data = model.Accumulated.Pipeline.Activity || [];
        var master = model.Master.Pipeline || []

        data && data.forEach(function (element) {
            keys = keys.concat(element.Activities.map(function (o) {
                var f = _.find(master, function (m) {
                    return m.PM_ID === o.PM_ID
                })

                if (f && f.PIPELINE_HEX) {
                    colors.push(f.PIPELINE_HEX);
                }

                return o.PM_ID
            }));
        });


        /**
         * Initial
         *
         */
        var svg = d3.select("#chartAccumulatePipeline").append("svg")
            .attr("id", "svgAccumulatePipeline")
            .attr("width", $('.chart-wrapper').width())
            .attr("height", $('.chart-wrapper').width() / 1.92)
            .call(responsivefyChart);

        var margin = { top: 200, right: 80, bottom: 30, left: 60 },
            width = +svg.attr("width") - margin.left - margin.right,
            height = +svg.attr("height") - margin.top - margin.bottom,
            g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var x0 = d3.scaleBand()
            .rangeRound([0, width])
            .paddingInner(0.1);

        var x1 = d3.scaleBand()
            .padding(0.05);

        var y = d3.scaleLinear()
            .rangeRound([height, 0]);

        var y1 = d3.scaleBand()

        var z = d3.scaleOrdinal()
            .range(["#f0b386", "#9ac5e7"]);

        var stack = d3.stack()
            .offset(d3.stackOffsetExpand);

        var data = model.Accumulated.Pipeline || [];

        console.log("data", data);

        x0.domain(data.map(function (d) { return d.PM_ID; }));
        x1.domain(data.map(function (d) { return d.MONTH; }))
            .rangeRound([0, x0.bandwidth()])
            .padding(0.2);

        z.domain(['PLAN_PERCENTAGE', 'ACTUAL_PERCENTAGE'])
        var keys = z.domain()

        var groupData = d3.nest()
            .key(function (d) { return d.MONTH + d.PM_ID; })
            .rollup(function (d, i) {
                var PLAN_PERCENTAGE = d[0].PLAN
                var ACTUAL_PERCENTAGE = d[0].ACTUAL

                if (PLAN_PERCENTAGE > 0) {
                    ACTUAL_PERCENTAGE = (ACTUAL_PERCENTAGE * 100) / PLAN_PERCENTAGE
                    PLAN_PERCENTAGE = 100 - ACTUAL_PERCENTAGE
                }
                else {
                    PLAN_PERCENTAGE = 0
                    ACTUAL_PERCENTAGE = 0
                }

                var d2 = {
                    MONTH: d[0].MONTH,
                    PM_ID: d[0].PM_ID,
                    PLAN: d[0].PLAN,
                    ACTUAL: d[0].ACTUAL,
                    PLAN_PERCENTAGE: PLAN_PERCENTAGE,
                    ACTUAL_PERCENTAGE: ACTUAL_PERCENTAGE
                }

                console.log("rollup d", d, d2);
                return d2;
            })
            .entries(data)
            .map(function (d) { return d.value; });

        console.log("groupData", groupData)

        var stackData = stack
            .keys(keys)(groupData)

        console.log("stackData", stackData)

        //y.domain([0, 100]).nice();

        console.log("keys", keys)

        var serie = g.selectAll(".serie")
            .data(stackData)
            .enter().append("g")
            .attr("class", "serie")
            .attr("fill", function (d) { return z(d.key); });

        serie.selectAll("rect")
            .data(function (d) { return d; })
            .enter().append("rect")
            .attr("class", "serie-rect")
            .attr("transform", function (d) {
                return "translate(" + x0(d.data.PM_ID) + ",0)";
            })
            .attr("x", function (d) {
                return x1(d.data.MONTH);
            })
            .attr("y", function (d) {
                return y(d[1]);
            })
            .attr("height", function (d) {
                return y(d[0]) - y(d[1]);
            })
            .attr("width", x1.bandwidth())
            .on("click", function (d, i) { console.log("serie-rect click d", i, d); });

        g.append("g")
            .attr("class", "axis")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x0));

        g.append("g")
            .attr("class", "axis")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x0));

        g.append("g")
            .attr("class", "axis ")
            .call(d3.axisLeft(y).ticks(null, "s"))
            .append("text")
            .attr("x", 0)
            .attr("y", -40)
            .attr("fill", "#000")
            .attr("font-weight", "bold")
            .attr("text-anchor", "end")
            .attr("transform", "rotate(-90)")
            .text("จำนวน % (การทำ PM)");
        /*
          var legend = g.append("g")
              .attr("font-family", "sans-serif")
              .attr("font-size", 10)
              .attr("text-anchor", "end")
            .selectAll("g")
            .data(keys.slice().reverse())
            .enter().append("g")
              .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
        
          legend.append("rect")
              .attr("x", width - 19)
              .attr("width", 19)
              .attr("height", 19)
              .attr("fill", z);
        
          legend.append("text")
              .attr("x", width - 24)
              .attr("y", 9.5)
              .attr("dy", "0.32em")
              .text(function(d) { return d; });
              
              */

        var legend = serie.append("g")
            .attr("class", "legend")
            .attr("transform", function (d) {
                if (d) return null

                var d = d[d.length - 1];
                return "translate(" + (x0(d.data.PM_ID) + x1(d.data.MONTH) + x1.bandwidth()) + "," + ((y(d[0]) + y(d[1])) / 2) + ")";
            });

        legend.append("line")
            .attr("x1", -6)
            .attr("x2", 6)
            .attr("stroke", "#000");

        //legend.append("text")
        //    .attr("x", 9)
        //    .attr("dy", "0.35em")
        //    .attr("fill", "#000")
        //    .style("font", "10px sans-serif")
        //    .text(function (d) { return d.key; });
    }

    $(document).ready(function () {
        $('#panelPipeline').on('shown.bs.collapse', function () {
            renderChartAccumulatePipeline()
        })
    });
</script>
