<script type="text/javascript">
    // Chart

    var responsivefy = function (svg) {
        // get container + svg aspect ratio
        var container = d3.select('.chart-wrapper'),
            width = parseInt(svg.style("width")),
            height = parseInt(svg.style("height")),
            aspect = width / height;

        // add viewBox and preserveAspectRatio properties,
        // and call resize so that svg resizes on inital page load
        svg.attr("viewBox", "0 0 " + width + " " + height)
            .attr("preserveAspectRatio", "xMinYMid")
            .call(resize);

        // to register multiple listeners for same event type,
        // you need to add namespace, i.e., 'click.foo'
        // necessary if you call invoke this function for multiple svgs
        // api docs: https://github.com/mbostock/d3/wiki/Selections#on
        d3.select(window).on("resize." + container.attr("id"), resize);

        // get width of container and resize svg to fit it
        function resize() {
            var targetWidth = parseInt(container.style("width"));
            svg.attr("width", targetWidth);
            svg.attr("height", Math.round(targetWidth / aspect));
        }
    }

    var renderChart = function (data) {
        $("#chart svg").remove();


        /**
         * Config
         * 
         */
        var colors = ["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]

        var keys = []
        vueSummary.pipeline.Summary.Accumulate.forEach(function (element) {
            keys = keys.concat(element.Activities.map(function (o) { return o.PM_ID }));
        });

        var data = vueSummary.pipeline.Results.Results;
        //var data = [
        //    {
        //        "State": "CA",
        //        "Under 5 Years": 2704659,
        //        "5 to 13 Years": 4499890,
        //        "14 to 17 Years": 2159981,
        //        "18 to 24 Years": 3853788,
        //        "25 to 44 Years": 10604510,
        //        "45 to 64 Years": 8819342,
        //        "65 Years and Over": 4114496,
        //        "all": 700000
        //    },
        //    { "State": "TX", "Under 5 Years": 2027307, "5 to 13 Years": 3277946, "14 to 17 Years": 1420518, "18 to 24 Years": 2454721, "25 to 44 Years": 7017731, "45 to 64 Years": 5656528, "65 Years and Over": 2472223, "all": 700000 }, { "State": "NY", "Under 5 Years": 1208495, "5 to 13 Years": 2141490, "14 to 17 Years": 1058031, "18 to 24 Years": 1999120, "25 to 44 Years": 5355235, "45 to 64 Years": 5120254, "65 Years and Over": 2607672, "all": 700000 }, { "State": "FL", "Under 5 Years": 1140516, "5 to 13 Years": 1938695, "14 to 17 Years": 925060, "18 to 24 Years": 1607297, "25 to 44 Years": 4782119, "45 to 64 Years": 4746856, "65 Years and Over": 3187797, "all": 700000 }, { "State": "IL", "Under 5 Years": 894368, "5 to 13 Years": 1558919, "14 to 17 Years": 725973, "18 to 24 Years": 1311479, "25 to 44 Years": 3596343, "45 to 64 Years": 3239173, "65 Years and Over": 1575308, "all": 700000 }, { "State": "PA", "Under 5 Years": 737462, "5 to 13 Years": 1345341, "14 to 17 Years": 679201, "18 to 24 Years": 1203944, "25 to 44 Years": 3157759, "45 to 64 Years": 3414001, "65 Years and Over": 1910571, "all": 700000 }];


        /**
         * Initial
         * 
         */
        var svg = d3.select("#chart").append("svg")
            .attr("width", $('.chart-wrapper').width())
            .attr("height", $('.chart-wrapper').width() / 1.92)
            .call(responsivefy);
        var margin = { top: 140, right: 80, bottom: 30, left: 80 },
            width = +svg.attr("width") - margin.left - margin.right,
            height = +svg.attr("height") - margin.top - margin.bottom,
            g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var x0 = d3.scaleBand()
            .rangeRound([0, width])
            .paddingInner(0.1);

        var x1 = d3.scaleBand()
            .padding(0.05);

        var y = d3.scaleLinear()
            .rangeRound([height, 0]);

        var z = d3.scaleOrdinal()
            .range(colors);


        /**
         * Data
         * 
         */
        // Get Text Axis Bottom
        x0.domain(data.map(function (d) { return d.REGION; }));

        x1.domain(keys).rangeRound([0, x0.bandwidth()]);
        y.domain([0, 200]).nice();
        g.append("g")
            .selectAll("g")
            .data(data)
            .enter().append("g")
            .attr("transform", function (d) { return "translate(" + x0(d.State) + ",0)"; })
            .selectAll("rect")
            .data(function (d) {
                console.log(d.Activities)
                return keys.map(function (key) {
                    return {
                        key: key,
                        value: d[key]
                    };
                });
            })
            .enter().append("rect")
            .attr("x", function (d) { return x1(d.key); })
            .attr("y", function (d) { return y(d.value); })
            .attr("width", x1.bandwidth())
            .attr("height", function (d) { return height - y(d.value); })
            .attr("fill", function (d) { return z(d.key); });


        /**
         * Axis Left
         * 
         */
        g.append("g")
            .attr("class", "axis ")
            .call(d3.axisLeft(y).ticks(20))
            .append("text")
            .attr("x", 0)
            .attr("y", -50)
            .attr("fill", "#000")
            .attr("font-weight", "bold")
            .attr("text-anchor", "end")
            .attr("transform", "rotate(-90)")
            .text("% Completion");


        /**
         * Axis Bottom
         * 
         */
        g.append("g")
            .attr("class", "axis")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x0));


        /**
         * Title
         * 
         */
        svg.append("text")
            .attr("x", 15)
            .attr("y", 55)
            .attr("dy", ".35em")
            .attr("font-weight", "bold")
            .attr("font-size", 22)
            .style("text-anchor", "begin")
            .text("Pipeline PM % Completion (Ref. Master Plan)");


        /**
         * Legend
         * 
         */
        var startAt = 530,
            tabSpace = 570,
            legend_tabs = [],
            colMax = 2,
            colIndex = 0,
            rowSpace = 10,
            i;
        for (i = 0; i <= (keys.length + 1); i++) {
            legend_tabs.push({
                x: tabSpace * colIndex,
                y: rowSpace
            })

            colIndex++

            if ((i + 1) % colMax === 0) {
                colIndex = 0
                rowSpace = rowSpace + 20
            }
        }
        var startp = svg.append("g")
            .attr("class", "legendbox")
            .attr("transform", function () {
                return "translate(" + startAt + ", 0)"
            })
            .attr("id", "legendbox");

        var legend = startp.selectAll(".legend")
            .data(z.domain().slice())
            .enter().append("g")
            .attr("class", "legend")
            .attr("transform", function (d, i) {
                return "translate(" + legend_tabs[i].x + "," + legend_tabs[i].y + ")";
            });

        legend.append("rect")
            .attr("x", 0)
            .attr("y", 2)
            .attr("width", 10)
            .attr("height", 10)
            .style("fill", z);

        legend.append("text")
            .attr("x", 16)
            .attr("y", 9)
            .attr("dy", ".35em")
            .style("text-anchor", "begin")
            .text(function (d) { return vueSummary.PipelineActivity[d].PM_NAME_FULL; });
    }

    $('#accordion').on('shown.bs.collapse', function () {
        if (!vueSummary.isLoading) renderChart()
    })
</script>
